{
  "code": "import { Admin, Click, EventAdmin, Tools } from \"../Frame/lwg\";\r\nimport { Game3D } from \"./Game3D\";\r\nexport default class GameScene extends Admin.Scene {\r\n    lwgOnAwake() {\r\n        this.createQuestion();\r\n        this.createOppositeQuestion();\r\n    }\r\n    lwgNodeDec() {\r\n        this.OptionParent = this.self['OptionParent'];\r\n    }\r\n    lwgEventReg() {\r\n        EventAdmin.reg(Game3D.EventType.nextRound, this, () => {\r\n            this.createQuestion();\r\n        });\r\n        EventAdmin.reg(EventAdmin.EventType.victory, this, () => {\r\n            Admin._gameSwitch = false;\r\n            Admin._openScene(Admin.SceneName.UIVictory, this.self);\r\n        });\r\n    }\r\n    lwgOnEnable() {\r\n    }\r\n    createQuestion() {\r\n        if (this.OptionParent.numChildren > 0) {\r\n            this.OptionParent.removeChildren(0, this.OptionParent.numChildren - 1);\r\n        }\r\n        let arr = [];\r\n        if (Game3D.questionArr.length < 3) {\r\n            this.createOption(this.self['OptionParent'], this.self['OptionParent'].width / 2, this.self['OptionParent'].height / 2, Game3D.questionArr[0], false);\r\n        }\r\n        else {\r\n            for (let index = 0; index < Game3D.questionArr.length; index++) {\r\n                let x, y;\r\n                switch (index) {\r\n                    case 0:\r\n                        x = this.self['OptionParent'].width * 0.25;\r\n                        y = this.self['OptionParent'].height * 0.25;\r\n                        break;\r\n                    case 1:\r\n                        x = this.self['OptionParent'].width * 0.75;\r\n                        y = this.self['OptionParent'].height * 0.25;\r\n                        break;\r\n                    case 2:\r\n                        x = this.self['OptionParent'].width * 0.25;\r\n                        y = this.self['OptionParent'].height * 0.75;\r\n                        break;\r\n                    case 3:\r\n                        x = this.self['OptionParent'].width * 0.75;\r\n                        y = this.self['OptionParent'].height * 0.75;\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n                this.createOption(this.self['OptionParent'], x, y, Game3D.questionArr[index], true);\r\n            }\r\n        }\r\n    }\r\n    createOption(parent, x, y, question, click) {\r\n        let Option = Laya.Pool.getItemByCreateFun('Option', this.Option.create, this.Option);\r\n        let Content = Option.getChildByName('Content');\r\n        Content.text = question;\r\n        parent.addChild(Option);\r\n        Option.pos(x, y);\r\n        if (click) {\r\n            Click.on(Click.Type.largen, Option, this, null, null, () => {\r\n                EventAdmin.notify(Game3D.EventType.judgeQuestion, question);\r\n            });\r\n        }\r\n        return Option;\r\n    }\r\n    createOppositeQuestion() {\r\n        let GuessCard = Laya.Pool.getItemByCreateFun('GuessCard', this.GuessCard.create, this.GuessCard);\r\n        this.self.addChild(GuessCard);\r\n    }\r\n    onStageMouseDown(e) {\r\n        let hitResult = Tools.d3_rayScanning(Game3D.MainCamera, Game3D.Scene3D, new Laya.Vector2(e.stageX, e.stageY))[0];\r\n        let sprite3D;\r\n        if (hitResult) {\r\n            sprite3D = hitResult.collider.owner;\r\n            EventAdmin.notify(Game3D.EventType.judgeClickCard, sprite3D);\r\n        }\r\n    }\r\n    lwgBtnClick() {\r\n    }\r\n}\r\n",
  "references": [
    "D:/Game/project/Who/Project/Who/src/script/Frame/lwg.ts",
    "D:/Game/project/Who/Project/Who/src/script/Game/Game3D.ts"
  ]
}
