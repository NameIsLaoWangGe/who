{
  "code": "import { lwg3D } from \"../Frame/lwg3D\";\r\nimport { Tools, EventAdmin, Animation3D } from \"../Frame/lwg\";\r\nexport var Game3D;\r\n(function (Game3D) {\r\n    Game3D.questionArr = [];\r\n    Game3D.characteristicsData = [];\r\n    Game3D.CardData = [];\r\n    let WhichScard;\r\n    (function (WhichScard) {\r\n        WhichScard[\"OppositeCardParent\"] = \"OppositeCardParent\";\r\n        WhichScard[\"MyCardParent\"] = \"MyCardParent\";\r\n    })(WhichScard = Game3D.WhichScard || (Game3D.WhichScard = {}));\r\n    let CharacteristicsProperty;\r\n    (function (CharacteristicsProperty) {\r\n        CharacteristicsProperty[\"index\"] = \"index\";\r\n        CharacteristicsProperty[\"describe\"] = \"describe\";\r\n        CharacteristicsProperty[\"question\"] = \"question\";\r\n    })(CharacteristicsProperty = Game3D.CharacteristicsProperty || (Game3D.CharacteristicsProperty = {}));\r\n    let CardProperty;\r\n    (function (CardProperty) {\r\n        CardProperty[\"characteristicsArr\"] = \"characteristicsArr\";\r\n        CardProperty[\"ChName\"] = \"ChName\";\r\n        CardProperty[\"name\"] = \"name\";\r\n        CardProperty[\"fall\"] = \"fall\";\r\n    })(CardProperty = Game3D.CardProperty || (Game3D.CardProperty = {}));\r\n    let WhichBoutType;\r\n    (function (WhichBoutType) {\r\n        WhichBoutType[\"me\"] = \"me\";\r\n        WhichBoutType[\"opposite\"] = \"opposite\";\r\n        WhichBoutType[\"stop\"] = \"stop\";\r\n        WhichBoutType[\"victory\"] = \"victory\";\r\n        WhichBoutType[\"defeated\"] = \"defeted\";\r\n    })(WhichBoutType = Game3D.WhichBoutType || (Game3D.WhichBoutType = {}));\r\n    let EventType;\r\n    (function (EventType) {\r\n        EventType[\"judgeMeAnswer\"] = \"judgeMeAnswer\";\r\n        EventType[\"judgeOppositeAnswer\"] = \"judgeOppositeAnswer\";\r\n        EventType[\"judgeMeClickCard\"] = \"judgeMeClickCard\";\r\n        EventType[\"nextRound\"] = \"nextRound\";\r\n        EventType[\"meAnswer\"] = \"meAnswer\";\r\n        EventType[\"oppositeAnswer\"] = \"oppositeAnswer\";\r\n        EventType[\"winOrLose\"] = \"winOrLose\";\r\n        EventType[\"opening\"] = \"opening\";\r\n    })(EventType = Game3D.EventType || (Game3D.EventType = {}));\r\n    let CameraMoveType;\r\n    (function (CameraMoveType) {\r\n        CameraMoveType[\"nod\"] = \"nod\";\r\n        CameraMoveType[\"shake\"] = \"shake\";\r\n    })(CameraMoveType = Game3D.CameraMoveType || (Game3D.CameraMoveType = {}));\r\n    function randomlyTakeOut(type) {\r\n        let CardData1 = Tools.objArray_Copy(Game3D.CardData);\r\n        let cardData16 = Tools.arrayRandomGetOut(CardData1, 16);\r\n        if (type === WhichScard.MyCardParent) {\r\n            Game3D.oppositeHandName = Tools.arrayRandomGetOut(Tools.objArray_Copy(cardData16), 1)[0][CardProperty.name];\r\n        }\r\n        else if (type === WhichScard.OppositeCardParent) {\r\n            Game3D.myHandName = Tools.arrayRandomGetOut(Tools.objArray_Copy(cardData16), 1)[0][CardProperty.name];\r\n        }\r\n        let AllCardParent = Game3D.AllCardTem.clone();\r\n        let startZ = 0.3;\r\n        for (let index = 0; index < cardData16.length; index++) {\r\n            const Card = AllCardParent.getChildByName(cardData16[index][CardProperty.name]);\r\n            if (type === WhichScard.MyCardParent) {\r\n                if (Card.name === Game3D.oppositeHandName) {\r\n                    let HandCard = Card.clone();\r\n                    Game3D.OppositeHandDispaly.addChild(HandCard);\r\n                    HandCard.transform.localPosition = new Laya.Vector3(0, 0, 0);\r\n                }\r\n                Game3D.MyCardParent.addChild(Card);\r\n                if (index % 4 == 0) {\r\n                    startZ -= 0.5;\r\n                }\r\n                Card.transform.localPosition = new Laya.Vector3(0.5 * (index % 4) - 0.5, 0, startZ);\r\n                Card.transform.localRotationEulerX = 10;\r\n            }\r\n            else if (type === WhichScard.OppositeCardParent) {\r\n                if (Card.name === Game3D.myHandName) {\r\n                    let HandCard = Card.clone();\r\n                    Game3D.MyHandDispaly.addChild(HandCard);\r\n                    HandCard.transform.localPosition = new Laya.Vector3(0, 0, 0);\r\n                }\r\n                Game3D.OppositeCardParent.addChild(Card);\r\n                if (index % 4 == 0) {\r\n                    startZ += 0.5;\r\n                }\r\n                Card.transform.localPosition = new Laya.Vector3(0.5 * (index % 4) - 0.5, 0, startZ);\r\n                Card.transform.localRotationEulerX = -10;\r\n            }\r\n            Card[CardProperty.characteristicsArr] = cardData16[index][CardProperty.characteristicsArr];\r\n            Card[CardProperty.fall] = false;\r\n        }\r\n    }\r\n    Game3D.randomlyTakeOut = randomlyTakeOut;\r\n    function randomTaskCard(CardParent) {\r\n        let contrastArr = [];\r\n        for (let i = 0; i < Game3D.characteristicsData.length; i++) {\r\n            let index = Game3D.characteristicsData[i][CharacteristicsProperty.index];\r\n            contrastArr.push({\r\n                index: index,\r\n                value: 0\r\n            });\r\n        }\r\n        let residueNum = 0;\r\n        for (let i = 0; i < CardParent.numChildren; i++) {\r\n            let Card = CardParent.getChildAt(i);\r\n            if (!Card[CardProperty.fall]) {\r\n                residueNum++;\r\n                const characteristicsArr = Card[CardProperty.characteristicsArr];\r\n                for (let j = 0; j < characteristicsArr.length; j++) {\r\n                    const characteristicsIndex = characteristicsArr[j];\r\n                    contrastArr[characteristicsIndex - 1]['value']++;\r\n                }\r\n            }\r\n        }\r\n        for (let i = 0; i < contrastArr.length; i++) {\r\n            const element = contrastArr[i];\r\n            if (element['value'] === 0) {\r\n                contrastArr.splice(i, 1);\r\n                i--;\r\n            }\r\n        }\r\n        Tools.objArrPropertySort(contrastArr, 'value');\r\n        return contrastArr;\r\n    }\r\n    Game3D.randomTaskCard = randomTaskCard;\r\n    function answerForMe() {\r\n        let contrastArr = randomTaskCard(Game3D.MyCardParent);\r\n        let residueNum = noFallCardForMe().length;\r\n        let indexArr = [];\r\n        let medianIndex = Math.floor(contrastArr.length / 2);\r\n        let index1 = contrastArr[medianIndex]['index'];\r\n        let index2 = contrastArr[medianIndex + 1]['index'];\r\n        let index3 = contrastArr[medianIndex - 1]['index'];\r\n        let randIndex = Tools.randomOneHalf() ? -2 : 2;\r\n        let index4 = contrastArr[medianIndex + randIndex]['index'];\r\n        indexArr.push(index1, index2, index3, index4);\r\n        let arr = [];\r\n        for (let i = 0; i < Game3D.characteristicsData.length; i++) {\r\n            for (let j = 0; j < indexArr.length; j++) {\r\n                if (Game3D.characteristicsData[i][CharacteristicsProperty.index] == indexArr[j]) {\r\n                    arr.push(Game3D.characteristicsData[i][CharacteristicsProperty.question]);\r\n                }\r\n            }\r\n        }\r\n        if (residueNum == 1) {\r\n            return ['是谁？'];\r\n        }\r\n        else if (residueNum == 2) {\r\n            return ['是谁？'];\r\n        }\r\n        else {\r\n            return arr;\r\n        }\r\n    }\r\n    Game3D.answerForMe = answerForMe;\r\n    function answerForOpposite() {\r\n        let arr = [];\r\n        let question;\r\n        let contrastArr = randomTaskCard(Game3D.OppositeCardParent);\r\n        let residueArr = noFallCardOpposite();\r\n        let medianIndex = Math.floor(contrastArr.length / 2);\r\n        if (residueArr.length === 1) {\r\n            question = '是' + chNameForName(residueArr[0]) + '吗?';\r\n            arr = [question, true];\r\n        }\r\n        else if (residueArr.length === 2) {\r\n            let redio = Tools.randomOneHalf();\r\n            let name = chNameForName(residueArr[redio]);\r\n            question = '是' + name + '吗?';\r\n            arr = [question, residueArr[redio] == Game3D.myHandName ? true : false];\r\n        }\r\n        else {\r\n            for (let i = 0; i < Game3D.characteristicsData.length; i++) {\r\n                if (Game3D.characteristicsData[i][CharacteristicsProperty.index] == contrastArr[medianIndex]['index']) {\r\n                    question = Game3D.characteristicsData[i][CharacteristicsProperty.question];\r\n                    arr = [question, judgeAnswer(question, Game3D.OppositeCardParent)];\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        console.log(medianIndex, residueArr, contrastArr, Game3D.myHandName, arr);\r\n        return arr;\r\n    }\r\n    Game3D.answerForOpposite = answerForOpposite;\r\n    function noFallCardForMe() {\r\n        let arr = [];\r\n        for (let i = 0; i < Game3D.MyCardParent.numChildren; i++) {\r\n            let Card = Game3D.MyCardParent.getChildAt(i);\r\n            if (!Card[CardProperty.fall]) {\r\n                arr.push(Card.name);\r\n            }\r\n        }\r\n        return arr;\r\n    }\r\n    Game3D.noFallCardForMe = noFallCardForMe;\r\n    function noFallCardOpposite() {\r\n        let arr = [];\r\n        for (let i = 0; i < Game3D.OppositeCardParent.numChildren; i++) {\r\n            let Card = Game3D.OppositeCardParent.getChildAt(i);\r\n            if (!Card[CardProperty.fall]) {\r\n                arr.push(Card.name);\r\n            }\r\n        }\r\n        return arr;\r\n    }\r\n    Game3D.noFallCardOpposite = noFallCardOpposite;\r\n    function chNameForName(name) {\r\n        let chName;\r\n        for (let i = 0; i < Game3D.CardData.length; i++) {\r\n            if (name == Game3D.CardData[i][CardProperty.name]) {\r\n                chName = Game3D.CardData[i][CardProperty.ChName];\r\n                break;\r\n            }\r\n        }\r\n        return chName;\r\n    }\r\n    Game3D.chNameForName = chNameForName;\r\n    function characteristicsForName(name) {\r\n        let characteristics;\r\n        for (let i = 0; i < Game3D.CardData.length; i++) {\r\n            if (name == Game3D.CardData[i][CardProperty.name]) {\r\n                characteristics = Game3D.CardData[i][CardProperty.ChName];\r\n                break;\r\n            }\r\n        }\r\n        return characteristics;\r\n    }\r\n    Game3D.characteristicsForName = characteristicsForName;\r\n    function checkForQuestion(question, CardParent) {\r\n        let ChaIndex;\r\n        for (let i = 0; i < Game3D.characteristicsData.length; i++) {\r\n            if (question === Game3D.characteristicsData[i][CharacteristicsProperty.question]) {\r\n                ChaIndex = Game3D.characteristicsData[i][CharacteristicsProperty.index];\r\n            }\r\n        }\r\n        let haveCardArr = [];\r\n        let nohaveCardArr = [];\r\n        for (let i = 0; i < CardParent.numChildren; i++) {\r\n            let Card = CardParent.getChildAt(i);\r\n            let have;\r\n            if (!Card[CardProperty.fall]) {\r\n                for (let j = 0; j < Card[CardProperty.characteristicsArr].length; j++) {\r\n                    if (ChaIndex === Card[CardProperty.characteristicsArr][j]) {\r\n                        haveCardArr.push(Card.name);\r\n                        have = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if (!have) {\r\n                    nohaveCardArr.push(Card.name);\r\n                }\r\n            }\r\n        }\r\n        return [haveCardArr, nohaveCardArr];\r\n    }\r\n    Game3D.checkForQuestion = checkForQuestion;\r\n    function judgeAnswer(question, CardParent) {\r\n        let bool = false;\r\n        let cardArr = checkForQuestion(question, CardParent);\r\n        let haveCardArr = cardArr[0];\r\n        let handName;\r\n        if (CardParent === Game3D.MyCardParent) {\r\n            handName = Game3D.oppositeHandName;\r\n        }\r\n        else if (CardParent === Game3D.OppositeCardParent) {\r\n            handName = Game3D.myHandName;\r\n        }\r\n        for (let index = 0; index < haveCardArr.length; index++) {\r\n            if (haveCardArr[index] == handName) {\r\n                bool = true;\r\n            }\r\n        }\r\n        return bool;\r\n    }\r\n    Game3D.judgeAnswer = judgeAnswer;\r\n    function dataInit() {\r\n        Game3D.characteristicsData = Laya.loader.getRes(\"GameData/Game/characteristics.json\")['RECORDS'];\r\n        Game3D.CardData = Laya.loader.getRes(\"GameData/Game/Card.json\")['RECORDS'];\r\n    }\r\n    Game3D.dataInit = dataInit;\r\n    class MainScene extends lwg3D.Scene3D {\r\n        lwgOnAwake() {\r\n            Game3D.Scene3D = this.self;\r\n            Game3D.MainCamera = Game3D.Scene3D.getChildByName('Main Camera');\r\n            Game3D.MyCardParent = Game3D.Scene3D.getChildByName('MyCardParent');\r\n            Game3D.OppositeCardParent = Game3D.Scene3D.getChildByName('OppositeCardParent');\r\n            Game3D.OppositeHandDispaly = Game3D.Scene3D.getChildByName('OppositeHandDispaly');\r\n            Game3D.MyHandDispaly = Game3D.Scene3D.getChildByName('MyHandDispaly');\r\n            Game3D.AllCardTem = Game3D.Scene3D.getChildByName('AllCard');\r\n            Game3D.OppositeRole = Game3D.Scene3D.getChildByName('OppositeRole');\r\n        }\r\n        lwgEventReg() {\r\n            EventAdmin.reg(EventType.opening, this, () => {\r\n                Game3D.whichBout = WhichBoutType.me;\r\n                EventAdmin.notify(EventType.meAnswer, [answerForMe()]);\r\n            });\r\n            EventAdmin.reg(EventType.nextRound, this, () => {\r\n                if (Game3D.whichBout == WhichBoutType.me) {\r\n                    EventAdmin.notify(EventType.meAnswer, [answerForMe()]);\r\n                }\r\n                else if (Game3D.whichBout == WhichBoutType.opposite) {\r\n                    EventAdmin.notify(EventType.oppositeAnswer, [answerForOpposite(), chNameForName(Game3D.myHandName)]);\r\n                }\r\n            });\r\n            EventAdmin.reg(EventType.judgeMeAnswer, this, (question) => {\r\n                if (Game3D.whichBout !== WhichBoutType.me) {\r\n                    return;\r\n                }\r\n                this.roundChange();\r\n                let matching = judgeAnswer(question, Game3D.MyCardParent);\r\n                if (matching) {\r\n                    console.log('特征正确！');\r\n                    Animation3D.rock(Game3D.OppositeRole, new Laya.Vector3(5, 0, 0), 500, this, () => {\r\n                        let cardArr = checkForQuestion(question, Game3D.MyCardParent);\r\n                        this.carFallAni(cardArr[1], Game3D.MyCardParent);\r\n                        EventAdmin.notify(EventType.nextRound);\r\n                    });\r\n                }\r\n                else {\r\n                    console.log('特征错误！');\r\n                    Animation3D.rock(Game3D.OppositeRole, new Laya.Vector3(0, 5, 0), 500, this, () => {\r\n                        let cardArr = checkForQuestion(question, Game3D.MyCardParent);\r\n                        this.carFallAni(cardArr[0], Game3D.MyCardParent);\r\n                        EventAdmin.notify(EventType.nextRound);\r\n                    });\r\n                }\r\n            });\r\n            EventAdmin.reg(EventType.judgeMeClickCard, this, (MeshSprite3D) => {\r\n                if (MeshSprite3D[CardProperty.fall]) {\r\n                    return;\r\n                }\r\n                if (Game3D.whichBout !== WhichBoutType.me) {\r\n                    return;\r\n                }\r\n                this.roundChange();\r\n                if (MeshSprite3D.parent == Game3D.MyCardParent) {\r\n                    if (MeshSprite3D.name == Game3D.oppositeHandName) {\r\n                        console.log('我方赢了！');\r\n                        Animation3D.rock(Game3D.OppositeRole, new Laya.Vector3(5, 0, 0), 500, this, () => {\r\n                            this.carFallAni([MeshSprite3D.name], Game3D.MyCardParent, true);\r\n                            EventAdmin.notify(EventAdmin.EventType.victory);\r\n                        });\r\n                    }\r\n                    else {\r\n                        console.log('选错了！');\r\n                        Animation3D.rock(Game3D.OppositeRole, new Laya.Vector3(0, 5, 0), 500, this, () => {\r\n                            this.carFallAni([MeshSprite3D.name], Game3D.MyCardParent);\r\n                            EventAdmin.notify(EventType.nextRound);\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n            EventAdmin.reg(EventType.judgeOppositeAnswer, this, (question, bool) => {\r\n                if (Game3D.whichBout !== WhichBoutType.opposite) {\r\n                    return;\r\n                }\r\n                this.roundChange();\r\n                if (bool) {\r\n                    console.log('特征正确！');\r\n                    Animation3D.rock(Game3D.MainCamera, new Laya.Vector3(5, 0, 0), 500, this, () => {\r\n                        let cardArr = checkForQuestion(question, Game3D.OppositeCardParent);\r\n                        this.carFallAni(cardArr[1], Game3D.OppositeCardParent);\r\n                        if (noFallCardOpposite().length <= 1) {\r\n                            EventAdmin.notify(EventAdmin.EventType.defeated);\r\n                        }\r\n                        else {\r\n                            EventAdmin.notify(EventType.nextRound);\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    console.log('特征错误！');\r\n                    Animation3D.rock(Game3D.MainCamera, new Laya.Vector3(0, 5, 0), 500, this, () => {\r\n                        let cardArr = checkForQuestion(question, Game3D.OppositeCardParent);\r\n                        this.carFallAni(cardArr[0], Game3D.OppositeCardParent);\r\n                        EventAdmin.notify(EventType.nextRound);\r\n                    });\r\n                }\r\n            });\r\n            EventAdmin.reg(EventAdmin.EventType.victory, this, () => {\r\n            });\r\n            EventAdmin.reg(EventAdmin.EventType.nextCustoms, this, () => {\r\n                this.init();\r\n            });\r\n            EventAdmin.reg(EventAdmin.EventType.scene3DRefresh, this, () => {\r\n                this.init();\r\n            });\r\n        }\r\n        roundChange() {\r\n            if (Game3D.whichBout === WhichBoutType.me) {\r\n                Game3D.whichBout = WhichBoutType.opposite;\r\n            }\r\n            else if (Game3D.whichBout === WhichBoutType.opposite) {\r\n                Game3D.whichBout = WhichBoutType.me;\r\n            }\r\n        }\r\n        carFallAni(arrName, CardParent, exclude) {\r\n            if (exclude) {\r\n                let nofallArr = [];\r\n                for (let i = 0; i < CardParent.numChildren; i++) {\r\n                    const Card = CardParent.getChildAt(i);\r\n                    if (!Card[CardProperty.fall]) {\r\n                        nofallArr.push(Card.name);\r\n                    }\r\n                }\r\n                let arr = Tools.array1ExcludeArray2(nofallArr, arrName);\r\n                for (let k = 0; k < arr.length; k++) {\r\n                    let Card = CardParent.getChildByName(arr[k]);\r\n                    Card[CardProperty.fall] = true;\r\n                    Card.transform.localRotationEulerX = -90;\r\n                }\r\n            }\r\n            else {\r\n                for (let i = 0; i < arrName.length; i++) {\r\n                    let Card = CardParent.getChildByName(arrName[i]);\r\n                    if (!Card[CardProperty.fall]) {\r\n                        Card[CardProperty.fall] = true;\r\n                        Card.transform.localRotationEulerX = -90;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        lwgOnEnable() {\r\n            this.init();\r\n        }\r\n        init() {\r\n            Tools.node_RemoveAllChildren(Game3D.MyCardParent);\r\n            Tools.node_RemoveAllChildren(Game3D.OppositeCardParent);\r\n            Tools.node_RemoveAllChildren(Game3D.OppositeHandDispaly);\r\n            randomlyTakeOut(WhichScard.MyCardParent);\r\n            randomlyTakeOut(WhichScard.OppositeCardParent);\r\n        }\r\n    }\r\n    Game3D.MainScene = MainScene;\r\n    let RoleAni;\r\n    (function (RoleAni) {\r\n        RoleAni[RoleAni[\"chaofeng\"] = 0] = \"chaofeng\";\r\n        RoleAni[RoleAni[\"daji\"] = 1] = \"daji\";\r\n    })(RoleAni = Game3D.RoleAni || (Game3D.RoleAni = {}));\r\n    class Role extends lwg3D.Object3D {\r\n    }\r\n    Game3D.Role = Role;\r\n})(Game3D || (Game3D = {}));\r\nexport default Game3D;\r\n",
  "references": [
    "D:/Game/project/Who/Project/Who/src/script/Frame/lwg3D.ts",
    "D:/Game/project/Who/Project/Who/src/script/Frame/lwg.ts"
  ]
}
