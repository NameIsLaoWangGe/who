{
  "code": "import { lwg3D } from \"../Frame/lwg3D\";\r\nimport { Tools, EventAdmin, Animation3D, Admin } from \"../Frame/lwg\";\r\nexport var Game3D;\r\n(function (Game3D) {\r\n    Game3D.questionArr = [];\r\n    Game3D.featureData = [];\r\n    Game3D.CardData = [];\r\n    let WhichScard;\r\n    (function (WhichScard) {\r\n        WhichScard[\"OppositeCardParent\"] = \"OppositeCardParent\";\r\n        WhichScard[\"MyCardParent\"] = \"MyCardParent\";\r\n    })(WhichScard = Game3D.WhichScard || (Game3D.WhichScard = {}));\r\n    let featureProperty;\r\n    (function (featureProperty) {\r\n        featureProperty[\"index\"] = \"index\";\r\n        featureProperty[\"describe\"] = \"describe\";\r\n        featureProperty[\"question\"] = \"question\";\r\n    })(featureProperty = Game3D.featureProperty || (Game3D.featureProperty = {}));\r\n    let CardProperty;\r\n    (function (CardProperty) {\r\n        CardProperty[\"featureArr\"] = \"featureArr\";\r\n        CardProperty[\"ChName\"] = \"ChName\";\r\n        CardProperty[\"name\"] = \"name\";\r\n        CardProperty[\"fall\"] = \"fall\";\r\n    })(CardProperty = Game3D.CardProperty || (Game3D.CardProperty = {}));\r\n    let WhichBoutType;\r\n    (function (WhichBoutType) {\r\n        WhichBoutType[\"me\"] = \"me\";\r\n        WhichBoutType[\"opposite\"] = \"opposite\";\r\n        WhichBoutType[\"stop\"] = \"stop\";\r\n    })(WhichBoutType = Game3D.WhichBoutType || (Game3D.WhichBoutType = {}));\r\n    let EventType;\r\n    (function (EventType) {\r\n        EventType[\"judgeMeAnswer\"] = \"judgeMeAnswer\";\r\n        EventType[\"judgeOppositeAnswer\"] = \"judgeOppositeAnswer\";\r\n        EventType[\"judgeMeClickCard\"] = \"judgeMeClickCard\";\r\n        EventType[\"nextRound\"] = \"nextRound\";\r\n        EventType[\"meAnswer\"] = \"meAnswer\";\r\n        EventType[\"oppositeAnswer\"] = \"oppositeAnswer\";\r\n        EventType[\"winOrLose\"] = \"winOrLose\";\r\n        EventType[\"opening\"] = \"opening\";\r\n        EventType[\"hideOption\"] = \"hideOption\";\r\n        EventType[\"hideGuessCard\"] = \"hideGuessCard\";\r\n        EventType[\"doWell\"] = \"doWell\";\r\n    })(EventType = Game3D.EventType || (Game3D.EventType = {}));\r\n    let RoleName;\r\n    (function (RoleName) {\r\n        RoleName[\"Girl\"] = \"Girl\";\r\n    })(RoleName = Game3D.RoleName || (Game3D.RoleName = {}));\r\n    let RoleAniName;\r\n    (function (RoleAniName) {\r\n        RoleAniName[\"chaofeng\"] = \"chaofeng\";\r\n        RoleAniName[\"daiji\"] = \"daiji\";\r\n        RoleAniName[\"fouren\"] = \"fouren\";\r\n        RoleAniName[\"qupai\"] = \"qupai\";\r\n        RoleAniName[\"tiwen\"] = \"tiwen\";\r\n        RoleAniName[\"zhuhe\"] = \"zhuhe\";\r\n        RoleAniName[\"queding\"] = \"queding\";\r\n        RoleAniName[\"zhuhetingliu\"] = \"zhuhetingliu\";\r\n    })(RoleAniName = Game3D.RoleAniName || (Game3D.RoleAniName = {}));\r\n    let CardAni;\r\n    (function (CardAni) {\r\n        CardAni[\"standMe\"] = \"standMe\";\r\n        CardAni[\"fallMe\"] = \"fallMe\";\r\n        CardAni[\"standOpposite\"] = \"standOpposite\";\r\n        CardAni[\"fallOpposite\"] = \"fallOpposite\";\r\n        CardAni[\"blinkMe\"] = \"blinkMe\";\r\n        CardAni[\"blinkOpposite\"] = \"blinkOpposite\";\r\n        CardAni[\"clickMe\"] = \"clickMe\";\r\n    })(CardAni = Game3D.CardAni || (Game3D.CardAni = {}));\r\n    function set16InitialCards(type) {\r\n        let CardData1 = Tools.objArray_Copy(Game3D.CardData);\r\n        let cardData16 = Tools.arrayRandomGetOut(CardData1, 16);\r\n        if (type == WhichScard.MyCardParent) {\r\n            Game3D.oppositeHandName = Tools.arrayRandomGetOut(Tools.objArray_Copy(cardData16), 1)[0][CardProperty.name];\r\n        }\r\n        else if (type == WhichScard.OppositeCardParent) {\r\n            Game3D.myHandName = Tools.arrayRandomGetOut(Tools.objArray_Copy(cardData16), 1)[0][CardProperty.name];\r\n        }\r\n        let AllCardParent = Game3D.AllCardTem.clone();\r\n        let startX = 0.204;\r\n        let spacingX = 0.3055;\r\n        let startZ = -0.26;\r\n        for (let index = 0; index < cardData16.length; index++) {\r\n            const Card = AllCardParent.getChildByName(cardData16[index][CardProperty.name]);\r\n            if (type == WhichScard.MyCardParent) {\r\n                Game3D.MyCardParent.addChild(Card);\r\n                if (index % 4 == 0) {\r\n                    startZ -= 0.45;\r\n                }\r\n                Card.transform.localPosition = new Laya.Vector3(spacingX * (index % 4) - startX, -0.1210217, startZ);\r\n                Tools.d3_animatorPlay(Card, CardAni.standMe);\r\n            }\r\n            else if (type == WhichScard.OppositeCardParent) {\r\n                Game3D.OppositeCardParent.addChild(Card);\r\n                if (index % 4 == 0) {\r\n                    startZ += 0.45;\r\n                }\r\n                Card.transform.localPosition = new Laya.Vector3(spacingX * (index % 4) - startX, -0.1210217, startZ + 0.2);\r\n                Tools.d3_animatorPlay(Card, CardAni.standOpposite);\r\n            }\r\n            Card[CardProperty.featureArr] = cardData16[index][CardProperty.featureArr];\r\n            Card[CardProperty.fall] = false;\r\n        }\r\n    }\r\n    Game3D.set16InitialCards = set16InitialCards;\r\n    function getFeatureWeights(CardParent) {\r\n        let weightArr = [];\r\n        for (let i = 0; i < Game3D.featureData.length; i++) {\r\n            let index = Game3D.featureData[i][featureProperty.index];\r\n            weightArr.push({\r\n                index: index,\r\n                value: 0\r\n            });\r\n        }\r\n        let residueNum = 0;\r\n        for (let i = 0; i < CardParent.numChildren; i++) {\r\n            let Card = CardParent.getChildAt(i);\r\n            if (!Card[CardProperty.fall]) {\r\n                residueNum++;\r\n                const featureArr = Card[CardProperty.featureArr];\r\n                for (let j = 0; j < featureArr.length; j++) {\r\n                    const featureIndex = featureArr[j];\r\n                    weightArr[featureIndex - 1]['value']++;\r\n                }\r\n            }\r\n        }\r\n        for (let i = 0; i < weightArr.length; i++) {\r\n            const element = weightArr[i];\r\n            if (element['value'] == 0) {\r\n                weightArr.splice(i, 1);\r\n                i--;\r\n            }\r\n        }\r\n        Tools.objArrPropertySort(weightArr, 'value');\r\n        return weightArr;\r\n    }\r\n    Game3D.getFeatureWeights = getFeatureWeights;\r\n    function setAnswerForMe() {\r\n        let weightArr = getFeatureWeights(Game3D.MyCardParent);\r\n        let residueNum = getNotFallCardNameForMe().length;\r\n        let arr = [];\r\n        if (residueNum == 1) {\r\n            return ['是谁？'];\r\n        }\r\n        else if (residueNum == 2) {\r\n            return ['是谁？'];\r\n        }\r\n        else {\r\n            let indexArr = [];\r\n            let medianIndex = Math.floor(weightArr.length / 2);\r\n            let index1 = weightArr[medianIndex]['index'];\r\n            let index2 = weightArr[medianIndex + 1]['index'];\r\n            let index3 = weightArr[medianIndex - 1]['index'];\r\n            let randIndex = Tools.randomOneHalf() ? -2 : 2;\r\n            let index4 = weightArr[medianIndex + randIndex]['index'];\r\n            indexArr.push(index1, index2, index3, index4);\r\n            for (let i = 0; i < Game3D.featureData.length; i++) {\r\n                for (let j = 0; j < indexArr.length; j++) {\r\n                    if (Game3D.featureData[i][featureProperty.index] == indexArr[j]) {\r\n                        arr.push(Game3D.featureData[i][featureProperty.question]);\r\n                    }\r\n                }\r\n            }\r\n            return arr;\r\n        }\r\n    }\r\n    Game3D.setAnswerForMe = setAnswerForMe;\r\n    function setAnswerForOpposite() {\r\n        let arr = [];\r\n        let question;\r\n        let weightArr = getFeatureWeights(Game3D.OppositeCardParent);\r\n        let residueArr = getNotFallCardNameOpposite();\r\n        let medianIndex = Math.floor(weightArr.length / 2);\r\n        if (residueArr.length == 1) {\r\n            question = '是' + getChNameByName(residueArr[0]) + '吗?';\r\n            arr = [question, true];\r\n        }\r\n        else if (residueArr.length == 2) {\r\n            let redio = Tools.randomOneHalf();\r\n            let name = getChNameByName(residueArr[redio]);\r\n            question = '是' + name + '吗?';\r\n            arr = [question, residueArr[redio] == Game3D.myHandName ? true : false];\r\n        }\r\n        else {\r\n            let featureIndex0;\r\n            for (let i = 0; i < Game3D.featureData.length; i++) {\r\n                if (Game3D.featureData[i][featureProperty.index] == weightArr[medianIndex]['index']) {\r\n                    question = Game3D.featureData[i][featureProperty.question];\r\n                    featureIndex0 = i;\r\n                    arr = [question, checkAnswerForHand(question, Game3D.OppositeCardParent)];\r\n                    break;\r\n                }\r\n            }\r\n            let cardArr0 = getCardHaveFeature(Game3D.OppositeCardParent, featureIndex0, true);\r\n            if (residueArr.length == cardArr0.length + 1) {\r\n                let indexArr = getTowCardNotFeatureArr(cardArr0[0], cardArr0[1]);\r\n                let index0 = Tools.arrayRandomGetOut(indexArr, 1)[0];\r\n                let question0 = getQuestionByIndex(index0);\r\n            }\r\n        }\r\n        return arr;\r\n    }\r\n    Game3D.setAnswerForOpposite = setAnswerForOpposite;\r\n    function getTowCardNotFeatureArr(Card1, Card2) {\r\n        let arr1 = Tools.array1ExcludeArray2(Card1[CardProperty.featureArr], Card2[CardProperty.featureArr]);\r\n        let arr2 = Tools.array1ExcludeArray2(Card2[CardProperty.featureArr], Card1[CardProperty.featureArr]);\r\n        let featureArr = Tools.arrayAddToarray(arr1, arr2);\r\n        return featureArr;\r\n    }\r\n    Game3D.getTowCardNotFeatureArr = getTowCardNotFeatureArr;\r\n    function getNotFallCard(CardParent) {\r\n        let CardArr = [];\r\n        for (let index = 0; index < CardParent.numChildren; index++) {\r\n            let Card = Game3D.MyCardParent.getChildAt(index);\r\n            if (!Card[CardProperty.fall]) {\r\n                CardArr.push(Card);\r\n            }\r\n        }\r\n        return CardArr;\r\n    }\r\n    Game3D.getNotFallCard = getNotFallCard;\r\n    function getNotFallCardNameForMe() {\r\n        let arr = [];\r\n        for (let i = 0; i < Game3D.MyCardParent.numChildren; i++) {\r\n            let Card = Game3D.MyCardParent.getChildAt(i);\r\n            if (!Card[CardProperty.fall]) {\r\n                arr.push(Card.name);\r\n            }\r\n        }\r\n        return arr;\r\n    }\r\n    Game3D.getNotFallCardNameForMe = getNotFallCardNameForMe;\r\n    function getNotFallCardNameOpposite() {\r\n        let arr = [];\r\n        for (let i = 0; i < Game3D.OppositeCardParent.numChildren; i++) {\r\n            let Card = Game3D.OppositeCardParent.getChildAt(i);\r\n            if (!Card[CardProperty.fall]) {\r\n                arr.push(Card.name);\r\n            }\r\n        }\r\n        return arr;\r\n    }\r\n    Game3D.getNotFallCardNameOpposite = getNotFallCardNameOpposite;\r\n    function getChNameByName(name) {\r\n        let chName;\r\n        for (let i = 0; i < Game3D.CardData.length; i++) {\r\n            if (name == Game3D.CardData[i][CardProperty.name]) {\r\n                chName = Game3D.CardData[i][CardProperty.ChName];\r\n                break;\r\n            }\r\n        }\r\n        return chName;\r\n    }\r\n    Game3D.getChNameByName = getChNameByName;\r\n    function getNameByChName(ChName) {\r\n        let name;\r\n        for (let i = 0; i < Game3D.CardData.length; i++) {\r\n            if (ChName == Game3D.CardData[i][CardProperty.ChName]) {\r\n                name = Game3D.CardData[i][CardProperty.name];\r\n                break;\r\n            }\r\n        }\r\n        return name;\r\n    }\r\n    Game3D.getNameByChName = getNameByChName;\r\n    function getFeatureArrByName(name) {\r\n        let featureArr;\r\n        for (let i = 0; i < Game3D.CardData.length; i++) {\r\n            if (name == Game3D.CardData[i][CardProperty.name]) {\r\n                featureArr = Game3D.CardData[i][CardProperty.ChName];\r\n                break;\r\n            }\r\n        }\r\n        return featureArr;\r\n    }\r\n    Game3D.getFeatureArrByName = getFeatureArrByName;\r\n    function getNameArrByQuestion(question) {\r\n        let fIndex;\r\n        for (let i = 0; i < Game3D.featureData.length; i++) {\r\n            if (question == Game3D.featureData[i][featureProperty.question]) {\r\n                fIndex = Game3D.featureData[i][featureProperty.index];\r\n                break;\r\n            }\r\n        }\r\n        let nameArr = [];\r\n        for (let i = 0; i < Game3D.CardData.length; i++) {\r\n            const Card = Game3D.CardData[i];\r\n            for (let j = 0; j < Card[CardProperty.featureArr].length; j++) {\r\n                if (fIndex == Card[CardProperty.featureArr][j]) {\r\n                    nameArr.push(Card[CardProperty.name]);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return nameArr;\r\n    }\r\n    Game3D.getNameArrByQuestion = getNameArrByQuestion;\r\n    function getNameArrByFeature(feature) {\r\n        let fIndex;\r\n        for (let index = 0; index < Game3D.featureData.length; index++) {\r\n            if (feature = Game3D.featureData[index]) {\r\n                fIndex = Game3D.featureData[index][featureProperty.index];\r\n                break;\r\n            }\r\n        }\r\n        let nameArr = [];\r\n        for (let i = 0; i < Game3D.CardData.length; i++) {\r\n            const Card = Game3D.CardData[i];\r\n            for (let j = 0; j < Card[CardProperty.featureArr].length; j++) {\r\n                if (fIndex == Card[CardProperty.featureArr][j]) {\r\n                    nameArr.push(Card[CardProperty.name]);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return nameArr;\r\n    }\r\n    Game3D.getNameArrByFeature = getNameArrByFeature;\r\n    function getIndexByFeature(feature) {\r\n        let index0;\r\n        for (let index = 0; index < Game3D.featureData.length; index++) {\r\n            if (feature === Game3D.featureData[index][featureProperty.describe]) {\r\n                index0 = index;\r\n                return index0;\r\n            }\r\n        }\r\n    }\r\n    Game3D.getIndexByFeature = getIndexByFeature;\r\n    function getQuestionByIndex(featureIndex) {\r\n        let question0;\r\n        for (let index = 0; index < Game3D.featureData.length; index++) {\r\n            if (featureIndex === Game3D.featureData[index][featureProperty.index]) {\r\n                question0 = Game3D.featureData[index][featureProperty.question];\r\n                return question0;\r\n            }\r\n        }\r\n    }\r\n    Game3D.getQuestionByIndex = getQuestionByIndex;\r\n    function getCardHaveFeature(CardParent, featureIndex, excludeHandName) {\r\n        let notfallArr;\r\n        notfallArr = getNotFallCard(CardParent);\r\n        let haveArr = [];\r\n        for (let i = 0; i < notfallArr.length; i++) {\r\n            const Card = notfallArr[i];\r\n            for (let j = 0; j < Card[CardProperty.featureArr].length; j++) {\r\n                if (excludeHandName) {\r\n                    if (Card.name == Game3D.myHandName || Card.name == Game3D.oppositeHandName) {\r\n                        console.log('排除手上的答案');\r\n                        break;\r\n                    }\r\n                    else {\r\n                        if (featureIndex == Card[CardProperty.featureArr][j]) {\r\n                            haveArr.push(notfallArr[i]);\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return haveArr;\r\n    }\r\n    Game3D.getCardHaveFeature = getCardHaveFeature;\r\n    function getCardNotHaveFeature(CardParent, featureIndex, excludeHandName) {\r\n        let notfallArr;\r\n        notfallArr = getNotFallCard(CardParent);\r\n        let haveArr = [];\r\n        for (let i = 0; i < notfallArr.length; i++) {\r\n            const Card = notfallArr[i];\r\n            let bool;\r\n            for (let j = 0; j < Card[CardProperty.featureArr].length; j++) {\r\n                if (excludeHandName) {\r\n                    if (Card.name == Game3D.myHandName || Card.name == Game3D.oppositeHandName) {\r\n                        break;\r\n                    }\r\n                    else {\r\n                        if (featureIndex == Card[CardProperty.featureArr][j]) {\r\n                            bool = true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (bool) {\r\n                haveArr.push(notfallArr[i]);\r\n            }\r\n        }\r\n        return haveArr;\r\n    }\r\n    Game3D.getCardNotHaveFeature = getCardNotHaveFeature;\r\n    function checkQuestion(question, CardParent) {\r\n        let ChaIndex;\r\n        for (let i = 0; i < Game3D.featureData.length; i++) {\r\n            if (question == Game3D.featureData[i][featureProperty.question]) {\r\n                ChaIndex = Game3D.featureData[i][featureProperty.index];\r\n            }\r\n        }\r\n        let haveCardArr = [];\r\n        let nohaveCardArr = [];\r\n        for (let i = 0; i < CardParent.numChildren; i++) {\r\n            let Card = CardParent.getChildAt(i);\r\n            let have;\r\n            if (!Card[CardProperty.fall]) {\r\n                for (let j = 0; j < Card[CardProperty.featureArr].length; j++) {\r\n                    if (ChaIndex == Card[CardProperty.featureArr][j]) {\r\n                        haveCardArr.push(Card.name);\r\n                        have = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if (!have) {\r\n                    nohaveCardArr.push(Card.name);\r\n                }\r\n            }\r\n        }\r\n        return [haveCardArr, nohaveCardArr];\r\n    }\r\n    Game3D.checkQuestion = checkQuestion;\r\n    function checkAnswerForHand(question, CardParent) {\r\n        let bool = false;\r\n        let cardArr = checkQuestion(question, CardParent);\r\n        let haveCardArr = cardArr[0];\r\n        let handName;\r\n        if (CardParent == Game3D.MyCardParent) {\r\n            handName = Game3D.oppositeHandName;\r\n        }\r\n        else if (CardParent == Game3D.OppositeCardParent) {\r\n            handName = Game3D.myHandName;\r\n        }\r\n        for (let index = 0; index < haveCardArr.length; index++) {\r\n            if (haveCardArr[index] == handName) {\r\n                bool = true;\r\n            }\r\n        }\r\n        return bool;\r\n    }\r\n    Game3D.checkAnswerForHand = checkAnswerForHand;\r\n    function dataInit() {\r\n        Game3D.featureData = Laya.loader.getRes(\"GameData/Game/Feature.json\")['RECORDS'];\r\n        Game3D.CardData = Laya.loader.getRes(\"GameData/Game/Card.json\")['RECORDS'];\r\n    }\r\n    Game3D.dataInit = dataInit;\r\n    class MainScene extends lwg3D.Scene3D {\r\n        lwgOnAwake() {\r\n            Game3D.Scene3D = this.self;\r\n            Game3D.MainCamera = this.self.getChildByName('MainCamera');\r\n            Game3D.OppositeRoleParent = this.self.getChildByName('OppositeRoleParent');\r\n            Game3D.MyCardParent = this.self.getChildByName('MyCardParent');\r\n            Game3D.OppositeCardParent = this.self.getChildByName('OppositeCardParent');\r\n            Game3D.AllCardTem = this.self.getChildByName('AllCard');\r\n            Game3D.PerspectiveMe = this.self.getChildByName('PerspectiveMe');\r\n            Game3D.PerspectiveOPPosite = this.self.getChildByName('PerspectiveOPPosite');\r\n            Game3D.PerspectiveAwait = this.self.getChildByName('PerspectiveAwait');\r\n        }\r\n        lwgOnEnable() {\r\n            this.init();\r\n        }\r\n        lwgEventReg() {\r\n            EventAdmin.reg(EventType.opening, this, () => {\r\n                Animation3D.moveRotateTo(Game3D.MainCamera, Game3D.PerspectiveOPPosite, time * 3, this, null, () => {\r\n                    Laya.timer.once(time * 3, this, () => {\r\n                        Tools.d3_animatorPlay(Game3D.OppositeRole, RoleAniName.chaofeng);\r\n                        Laya.timer.once(time * 4, this, () => {\r\n                            this.roundChange();\r\n                            EventAdmin.notify(EventType.nextRound);\r\n                        });\r\n                    });\r\n                });\r\n            });\r\n            let time = 500;\r\n            EventAdmin.reg(EventType.nextRound, this, () => {\r\n                if (Game3D.whichBout == WhichBoutType.me) {\r\n                    Animation3D.moveRotateTo(Game3D.MainCamera, Game3D.PerspectiveMe, time, this, null, () => {\r\n                        EventAdmin.notify(EventType.meAnswer, [setAnswerForMe()]);\r\n                    });\r\n                }\r\n                else if (Game3D.whichBout == WhichBoutType.opposite) {\r\n                    Animation3D.moveRotateTo(Game3D.MainCamera, Game3D.PerspectiveOPPosite, time, this, null, () => {\r\n                        EventAdmin.notify(EventType.oppositeAnswer, [setAnswerForOpposite(), getChNameByName(Game3D.myHandName)]);\r\n                    });\r\n                }\r\n            });\r\n            EventAdmin.reg(EventType.judgeMeAnswer, this, (question) => {\r\n                if (Game3D.whichBout !== WhichBoutType.me) {\r\n                    return;\r\n                }\r\n                this.roundChange();\r\n                let matching = checkAnswerForHand(question, Game3D.MyCardParent);\r\n                let cardArr = checkQuestion(question, Game3D.MyCardParent);\r\n                Animation3D.moveRotateTo(Game3D.MainCamera, Game3D.PerspectiveOPPosite, time, this, null, () => {\r\n                    if (matching) {\r\n                        console.log('我回答正确');\r\n                        Tools.d3_animatorPlay(Game3D.OppositeRole, RoleAniName.queding);\r\n                        Laya.timer.once(time * 4, this, () => {\r\n                            Animation3D.moveRotateTo(Game3D.MainCamera, Game3D.PerspectiveMe, time, this, null, () => {\r\n                                Laya.timer.once(time * 1.5, this, () => {\r\n                                    this.carFallAni(cardArr[1], Game3D.MyCardParent);\r\n                                    Laya.timer.once(time * 4, this, () => {\r\n                                        EventAdmin.notify(EventType.nextRound);\r\n                                    });\r\n                                });\r\n                            });\r\n                        });\r\n                    }\r\n                    else {\r\n                        console.log('我回答错误');\r\n                        Tools.d3_animatorPlay(Game3D.OppositeRole, RoleAniName.fouren);\r\n                        Laya.timer.once(time * 4, this, () => {\r\n                            Animation3D.moveRotateTo(Game3D.MainCamera, Game3D.PerspectiveMe, time, this, null, () => {\r\n                                Laya.timer.once(time * 1.5, this, () => {\r\n                                    this.carFallAni(cardArr[0], Game3D.MyCardParent);\r\n                                    Laya.timer.once(time * 4, this, () => {\r\n                                        EventAdmin.notify(EventType.nextRound);\r\n                                    });\r\n                                });\r\n                            });\r\n                        });\r\n                    }\r\n                });\r\n            });\r\n            EventAdmin.reg(EventType.judgeMeClickCard, this, (Card) => {\r\n                if (Card[CardProperty.fall]) {\r\n                    return;\r\n                }\r\n                if (Game3D.whichBout !== WhichBoutType.me) {\r\n                    return;\r\n                }\r\n                if (Card.parent == Game3D.MyCardParent) {\r\n                    Tools.d3_animatorPlay(Card, CardAni.clickMe);\r\n                    this.roundChange();\r\n                    if (Card.name == Game3D.oppositeHandName) {\r\n                        Animation3D.moveRotateTo(Game3D.MainCamera, Game3D.PerspectiveOPPosite, time, this, null, () => {\r\n                            console.log('我方赢了！');\r\n                            let ani = Tools.d3_animatorPlay(Game3D.OppositeRole, RoleAniName.zhuhetingliu);\r\n                            Laya.timer.once(time * 3, this, () => {\r\n                                this.carFallAni([Game3D.oppositeHandName], Game3D.MyCardParent, true);\r\n                                Laya.timer.once(time * 4, this, () => {\r\n                                    EventAdmin.notify(EventAdmin.EventType.victory);\r\n                                });\r\n                            });\r\n                        });\r\n                    }\r\n                    else {\r\n                        Animation3D.moveRotateTo(Game3D.MainCamera, Game3D.PerspectiveOPPosite, time, this, null, () => {\r\n                            console.log('我选错了！');\r\n                            Tools.d3_animatorPlay(Game3D.OppositeRole, RoleAniName.fouren);\r\n                            Laya.timer.once(time * 4, this, () => {\r\n                                Animation3D.moveRotateTo(Game3D.MainCamera, Game3D.PerspectiveMe, time, this, null, () => {\r\n                                    Tools.d3_animatorPlay(Game3D.OppositeRole, RoleAniName.daiji);\r\n                                    Laya.timer.once(time * 1.5, this, () => {\r\n                                        this.carFallAni([Card.name], Game3D.MyCardParent);\r\n                                        Laya.timer.once(time * 4, this, () => {\r\n                                            EventAdmin.notify(EventType.nextRound);\r\n                                        });\r\n                                    });\r\n                                });\r\n                            });\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n            EventAdmin.reg(EventType.judgeOppositeAnswer, this, (question, bool) => {\r\n                if (Game3D.whichBout !== WhichBoutType.opposite) {\r\n                    return;\r\n                }\r\n                this.roundChange();\r\n                let cardArr = checkQuestion(question, Game3D.OppositeCardParent);\r\n                let notFallLen = getNotFallCardNameOpposite().length;\r\n                if (bool) {\r\n                    console.log('对方回答正确');\r\n                    Animation3D.rock(Game3D.MainCamera, new Laya.Vector3(5, 0, 0), time, this, () => {\r\n                        EventAdmin.notify(Game3D.EventType.hideGuessCard);\r\n                        Laya.timer.once(time * 2.5, this, () => {\r\n                            if (notFallLen == 2) {\r\n                                console.log('对方只剩下2张牌，并且回答正确了，我方输了~！');\r\n                                Tools.d3_animatorPlay(Game3D.OppositeRole, RoleAniName.chaofeng);\r\n                                let name = getNameByChName(question.substring(1, question.length - 2));\r\n                                console.log('即将倒下的牌是排除', name);\r\n                                Laya.timer.once(time * 3, this, () => {\r\n                                    this.carFallAni([name], Game3D.OppositeCardParent, true);\r\n                                    Laya.timer.once(time * 3, this, () => {\r\n                                        EventAdmin.notify(EventAdmin.EventType.defeated);\r\n                                    });\r\n                                });\r\n                            }\r\n                            else if (notFallLen == 1) {\r\n                                Tools.d3_animatorPlay(Game3D.OppositeRole, RoleAniName.chaofeng);\r\n                                Laya.timer.once(time * 3, this, () => {\r\n                                    EventAdmin.notify(EventAdmin.EventType.defeated);\r\n                                });\r\n                            }\r\n                            else {\r\n                                Tools.d3_animatorPlay(Game3D.OppositeRole, RoleAniName.qupai);\r\n                                Laya.timer.once(time * 3, this, () => {\r\n                                    this.carFallAni(cardArr[1], Game3D.OppositeCardParent);\r\n                                    Laya.timer.once(time * 3, this, () => {\r\n                                        EventAdmin.notify(EventType.nextRound);\r\n                                    });\r\n                                });\r\n                            }\r\n                        });\r\n                    });\r\n                }\r\n                else {\r\n                    console.log('对方回答错误');\r\n                    Animation3D.rock(Game3D.MainCamera, new Laya.Vector3(0, 5, 0), time, this, () => {\r\n                        EventAdmin.notify(Game3D.EventType.hideGuessCard, [() => {\r\n                                Tools.d3_animatorPlay(Game3D.OppositeRole, RoleAniName.qupai);\r\n                            }]);\r\n                        Laya.timer.once(time * 3, this, () => {\r\n                            console.log('对方回答错误，倒下的牌将会是：', cardArr[0]);\r\n                            if (notFallLen == 2) {\r\n                                console.log('对方只剩下2张牌了，但是回答错了，我们还有一次机会~！');\r\n                                let name = getNameByChName(question.substring(1, question.length - 2));\r\n                                console.log('即将倒下的牌是', name);\r\n                                Laya.timer.once(time * 1, this, () => {\r\n                                    this.carFallAni([name], Game3D.OppositeCardParent);\r\n                                    Laya.timer.once(time * 3, this, () => {\r\n                                        EventAdmin.notify(EventType.nextRound);\r\n                                    });\r\n                                });\r\n                            }\r\n                            else {\r\n                                Laya.timer.once(time * 1, this, () => {\r\n                                    this.carFallAni(cardArr[0], Game3D.OppositeCardParent);\r\n                                    Laya.timer.once(time * 3, this, () => {\r\n                                        EventAdmin.notify(EventType.nextRound);\r\n                                    });\r\n                                });\r\n                            }\r\n                        });\r\n                    });\r\n                }\r\n            });\r\n            EventAdmin.reg(EventAdmin.EventType.nextCustoms, this, () => {\r\n                Animation3D.moveRotateTo(Game3D.MainCamera, Game3D.PerspectiveAwait, 1500, this);\r\n                this.init();\r\n            });\r\n            EventAdmin.reg(EventAdmin.EventType.resurgence, this, () => {\r\n                this.init();\r\n            });\r\n        }\r\n        roundChange() {\r\n            switch (Game3D.whichBout) {\r\n                case WhichBoutType.stop:\r\n                    Game3D.whichBout = WhichBoutType.me;\r\n                    break;\r\n                case WhichBoutType.me:\r\n                    EventAdmin.notify(Game3D.EventType.hideOption);\r\n                    Game3D.whichBout = WhichBoutType.opposite;\r\n                    break;\r\n                case WhichBoutType.opposite:\r\n                    Game3D.whichBout = WhichBoutType.me;\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n        carFallAni(arrName, CardParent, exclude) {\r\n            let fallNum = 0;\r\n            var playAni = (Card) => {\r\n                if (CardParent == Game3D.MyCardParent) {\r\n                    Tools.d3_animatorPlay(Card, CardAni.blinkMe);\r\n                    Laya.timer.once(600, this, () => {\r\n                        Tools.d3_animatorPlay(Card, CardAni.fallMe);\r\n                    });\r\n                }\r\n                else {\r\n                    Tools.d3_animatorPlay(Card, CardAni.blinkOpposite);\r\n                    Laya.timer.once(600, this, () => {\r\n                        Tools.d3_animatorPlay(Card, CardAni.fallOpposite);\r\n                    });\r\n                }\r\n            };\r\n            if (exclude) {\r\n                let nofallArr = [];\r\n                for (let i = 0; i < CardParent.numChildren; i++) {\r\n                    const Card = CardParent.getChildAt(i);\r\n                    if (!Card[CardProperty.fall]) {\r\n                        nofallArr.push(Card.name);\r\n                    }\r\n                }\r\n                let arr = Tools.array1ExcludeArray2(nofallArr, arrName);\r\n                for (let k = 0; k < arr.length; k++) {\r\n                    fallNum++;\r\n                    let Card = CardParent.getChildByName(arr[k]);\r\n                    Card[CardProperty.fall] = true;\r\n                    playAni(Card);\r\n                }\r\n            }\r\n            else {\r\n                for (let i = 0; i < arrName.length; i++) {\r\n                    let Card = CardParent.getChildByName(arrName[i]);\r\n                    if (!Card[CardProperty.fall]) {\r\n                        fallNum++;\r\n                        Card[CardProperty.fall] = true;\r\n                        playAni(Card);\r\n                    }\r\n                }\r\n            }\r\n            Laya.timer.once(400, this, () => {\r\n                if (fallNum >= 2) {\r\n                    if (CardParent == Game3D.MyCardParent) {\r\n                        EventAdmin.notify(EventType.doWell);\r\n                    }\r\n                    else {\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        init() {\r\n            Admin._gameSwitch = true;\r\n            Game3D.whichBout = WhichBoutType.stop;\r\n            Tools.node_RemoveAllChildren(Game3D.MyCardParent);\r\n            Tools.node_RemoveAllChildren(Game3D.OppositeCardParent);\r\n            set16InitialCards(WhichScard.MyCardParent);\r\n            set16InitialCards(WhichScard.OppositeCardParent);\r\n            this.changeOpppsiteRole();\r\n            Tools.d3_animatorPlay(Game3D.OppositeRole, RoleAniName.daiji);\r\n        }\r\n        changeOpppsiteRole() {\r\n            Game3D.OppositeRole = Game3D.OppositeRoleParent.getChildByName('Girl');\r\n            let CardMarked = Tools.node_3dFindChild(Game3D.OppositeRole, 'CardMarked');\r\n            let Card = Game3D.MyCardParent.getChildByName(Game3D.oppositeHandName);\r\n            let mt = Card.meshRenderer.material;\r\n            CardMarked.meshRenderer.material = mt;\r\n        }\r\n    }\r\n    Game3D.MainScene = MainScene;\r\n})(Game3D || (Game3D = {}));\r\nexport default Game3D;\r\n",
  "references": [
    "D:/Game/project/Who/Project/Who/src/script/Frame/lwg3D.ts",
    "D:/Game/project/Who/Project/Who/src/script/Frame/lwg.ts"
  ]
}
